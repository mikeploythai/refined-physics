Code "Sonic - Global Changes" by "cali_burrito"
//
  #include "Reflection" noemit

  #lib "Reflection"
  #lib "SonicParameters"
  #lib "Player"
  #lib "MathHelpers"
  #lib "INI"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
  static float chargeCount = 0f;
//
{
  if (!isLoaded) {
    directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Refined Physics");
    isLoaded = true;
  }

  var config = INI.Read(Path.Combine(directory, "config.ini"));
  bool isChargableSpinDashEnabled = bool.Parse(config["global"]["chargableSpinDash"]);
  bool isNoSpinChargeDeceleEnabled = bool.Parse(config["global"]["noSpinChargeDecele"]);
  int momentumVal = int.Parse(config["global"]["momentum"]);

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  // Ground Momentum
  if (momentumVal != 0) {
    float force = 10f;

    if (momentumVal == 2 || momentumVal == 3) force = 4f;

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.decele.force, force);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.decele.force2, force);
  }

  // Rail Momentum
  if (momentumVal != 0) {
    float force = 10f;
    float minRailSpeed = Player.Status.IsSideView() ? 6f : 8f;

    if (momentumVal == 2 || momentumVal == 2) force = 4f;

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.deceleForce, force);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.limitSpeedMin, minRailSpeed);
  }

  // Chargable Spin Dash
  if (isChargableSpinDashEnabled) {
    float dashVelocity = Player.Kinematics.GetHorizontalMagnitude();
    float minSpeed = Player.Status.IsSideView() ? 30f : 40f;
    float maxSpeed = Player.Status.IsSideView() ? 50f : 70f;

    if (Player.Status.IsGrounded() && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge) {
      if (Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom))
        chargeCount += 1f;

      chargeCount += 0.075f;
      dashVelocity = MathHelpers.Clamp((minSpeed - 7.5f) + (chargeCount * 7.5f), minSpeed, maxSpeed);
    } else if (!Player.Status.IsGrounded() && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge) {
      // Get out of charge state if LT is let go
      if (Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
        Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);

      chargeCount += 1f;
      dashVelocity = MathHelpers.Clamp(chargeCount, minSpeed, maxSpeed);
    } else {
      chargeCount = 0f;
      dashVelocity = Player.Kinematics.GetHorizontalMagnitude();
    }

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.initialSpeed, dashVelocity);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.maxSpeed, momentumVal == 0 ? Player.Kinematics.GetHorizontalMagnitude() : 3f);
  }

  // Spin Dash Momentum
  if (isChargableSpinDashEnabled && momentumVal != 0) {
    float force = 10f;

    if (momentumVal == 2 || momentumVal == 3)
      force = 4f;

    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.decele.force, force);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.decele.force2, force);
  }

  // Disable Spin Charge Air Deceleration
  if (isNoSpinChargeDeceleEnabled) {
    var kinematics = Player.Kinematics.Get();
    if (kinematics == null) return;

    if (!Player.Status.IsGrounded() && Player.Input.IsDown(Player.InputActionType.PlayerSonicboom) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge) {
      kinematics->Velocity += Player.Kinematics.GetForward();
    }
  }

  // Balanced Boost
  if (momentumVal == 2) {
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.boost.recoveryRate, 20f);
    RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.boost.consumptionRate, Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpinBoost ? 100f : 20f);
  }
}

Code "Sonic - Open Zone Changes" by "cali_burrito"
//
  #include "Reflection" noemit

  #lib "Reflection"
  #lib "SonicParameters"
  #lib "INI"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
//
{
  if (!isLoaded) {
    directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Refined Physics");
    isLoaded = true;
  }

  var config = INI.Read(Path.Combine(directory, "config.ini"));
  bool isFasterRunningEnabled = bool.Parse(config["openZone"]["fasterRunning"]);
  bool isFixedSlideEnabled = bool.Parse(config["openZone"]["fixedSlide"]);
  bool isWallRunEaseEnabled = bool.Parse(config["openZone"]["wallRunEase"]);
  bool isCyberAirBoostEnabled = bool.Parse(config["openZone"]["cyberAirBoost"]);
  bool isConsistentParryEnabled = bool.Parse(config["openZone"]["consistentParry"]);
  int momentumVal = int.Parse(config["global"]["momentum"]);

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  // Faster Speed
  if (isFasterRunningEnabled) {
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.normal.max, 20f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.normal2.max, 20f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost.initial, 40f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost.min, 30f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost.max, 40f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost2.initial, 40f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost2.min, 30f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.boost2.max, 40f);
  }

  // Modified Air Drag
  if (momentumVal != 0)
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.fall.overSpeedDeceleForce, 0f);

  // Fixed Sliding Speed
  if (isFixedSlideEnabled)
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.sliding.minSpeed, 8f);

  // Softer Wall Run Ease
  if (isWallRunEaseEnabled)
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.wallmove.brake, 20f);

  // Cyber Space Air Boost
  if (isCyberAirBoostEnabled) {
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.startHSpeed, 40f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.startHSpeedMax, 80f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minHSpeed, 30f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minHSpeedMax, 60f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minKeepTime, 0.05f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.maxKeepTime, 0.1f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.maxTime, 0f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.gravityRate, 0.5f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.additionalTransitTime, 0.3f);
  }

  // Consistent Parry Timing
  if (isConsistentParryEnabled) {
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.maxRecieveTimes[0], 2f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.maxRecieveTimes[1], 1.5f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.maxRecieveTimes[2], 1f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.maxRecieveTimes[3], 0.5f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justRecieveTimes[0], 2f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justRecieveTimes[1], 1.5f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justRecieveTimes[2], 1f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justRecieveTimes[3], 0.5f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justEffectTime, 1f);
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.parry.justEffectTime3, 1f);
  }

  // Balanced Boost
  if (momentumVal == 2)
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.boost.infinityBoostTime, 120f);
}

Code "Sonic - Cyber Space Changes" by "cali_burrito"
//
  #include "Reflection" noemit

  #lib "Reflection"
  #lib "SonicParameters"
  #lib "INI"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
//
{
  if (!isLoaded) {
    directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Refined Physics");
    isLoaded = true;
  }

  var config = INI.Read(Path.Combine(directory, "config.ini"));
  bool isSlowStartEnabled = bool.Parse(config["cyber"]["slowStart"]);
  bool isOpenRotationEnabled = bool.Parse(config["cyber"]["openRotation"]);
  int momentumVal = int.Parse(config["global"]["momentum"]);

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  // Lower Min Speed
  if (isSlowStartEnabled) {
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.speed.normal.initial, 5f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.speed.normal2.initial, 5f);
  }

  // Ground Momentum
  if (momentumVal != 0)
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.speed.maxGravityAccele, 10f);

  // Open Zone Rotation
  if (isOpenRotationEnabled) {
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.baseRotateForce, 500f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.baseRotateForce2, 3500f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.baseRotateForceSpeed, 15f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.minRotateForce, 60f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.maxRotateForce, 1000f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.angleRotateForceDecayEnabled, true);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.frontRotateRatio, 0.2f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.rotationForceDecaySpeed, 30f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.rotationForceDecayRate, 0f);
    RFL_SET_PARAM(SonicParams, cyberspace.modePackage.rotation.rotationForceDecayMax, 0f);
  }
}

Code "Sonic - Cyber Space 2D Changes" by "cali_burrito"
//
  #include "Reflection" noemit

  #lib "Reflection"
  #lib "SonicParameters"
  #lib "INI"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
//
{
  if (!isLoaded) {
    directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Refined Physics");
    isLoaded = true;
  }

  var config = INI.Read(Path.Combine(directory, "config.ini"));
  bool isFasterBoostEnabled = bool.Parse(config["cyberSV"]["fasterBoost"]);
  int momentumVal = int.Parse(config["global"]["momentum"]);

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  // Faster Boost
  if (isFasterBoostEnabled) {
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost.initial, 30f);
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost.min, 20f);
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost.max, 30f);
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost2.initial, 30f);
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost2.min, 20f);
    RFL_SET_PARAM(SonicParams, cyberspaceSV.modePackage.speed.boost2.max, 30f);
  }

  // Ground Momentum
  if (momentumVal != 0)
    RFL_SET_PARAM(SonicParams, cyberspaceSV.spinBoost.maxGravityDecele, 0f);
}