Code "Decreased Deceleration" by "mploythai" does
/*
  Decrease Sonic's deceleration on ground and in air, allowing him to...
  - Gain speed naturally without boosting
  - Prevent instant momentum loss after boosting/power boosting
  - Retain his forward momentum while in the air uncurled.
*/
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.decele.force, 5.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.decele.force2, 5.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.speed.decele.damperRange, 10.0f);

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.fall.deceleForce, 10.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.fall.overSpeedDeceleForce, 20.0f);
}

Code "Momentum Rails" by "mploythai" does
/*
  Make rails more momentum-based, allowing Sonic to gain/decrease speed when going up/down rails.
  Additionally, the minimum rail grinding speed has been decreased, and maximum rail speed is increased.
*/
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.grind.maxSpeed, 45.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.grind.deceleForce, 10.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.grind.limitSpeedMin, 5.0f);
}

Code "Generations-Styled Air Boost" by "mploythai" does "Make the air boost act similar to the one in Sonic Generations."
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
  #lib "BlackboardItem"

  static float minBoostSpeed = 40.0f;
  static float minPowerBoostSpeed = 55.0f;
  static float maxBoostSpeed = 60.0f;
  static float maxPowerBoostSpeed = 75.0f;
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.startHSpeed, BlackboardItem.GetRingCount() == SonicParams.pData->forwardView.modePackage.common.capacityRings ? minPowerBoostSpeed : minBoostSpeed);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.startHSpeedMax, BlackboardItem.GetRingCount() == SonicParams.pData->forwardView.modePackage.common.capacityRings ? maxPowerBoostSpeed : maxBoostSpeed);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minHSpeed, BlackboardItem.GetRingCount() == SonicParams.pData->forwardView.modePackage.common.capacityRings ? minPowerBoostSpeed : minBoostSpeed);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minHSpeedMax, BlackboardItem.GetRingCount() == SonicParams.pData->forwardView.modePackage.common.capacityRings ? maxPowerBoostSpeed : maxBoostSpeed);

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.brakeTime, 0.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.minKeepTime, 0.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.maxKeepTime, 0.0f);
  RFL_SET_PARAM(SonicParams, forwardView.modePackage.airboost.maxTime, 0.0f);
}

Code "Brake Easing for Wall Running" by "mploythai" does "Make Sonic ease into a stop when letting go of the boost button while wall running."
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.wallmove.brake, 15.0f);
}

Code "Decreased Minimum Slide Speed" by "mploythai" does "Decreased the minimum sliding speed."
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.sliding.minSpeed, 5.0f);
}

Code "Softer Ring Dash Brake" by "mploythai" does "Prevent Sonic from coming to an instant stop after ring dashing."
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.lightDash.brake, 75.0f);
}

Code "Easier Incline Jumps" by "mploythai" does "Makes incline jumps easier."
//
  #include "ReflectionHelpers" noemit

  #lib "SonicParameters"
//
{
  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.modePackage.jumpSpeed.limitUpSpeed, 30.0f);
}

Code "Momentum Spin Dash" by "mploythai" does
/*
  Inspired by Weezley's Legacy Spin Dash Mod!
  - Spin dash is now momentum-based
  - Spin dashing without charging retains Sonic's prior forward momentum, making it act like a normal roll
  - Spin charging on the ground determines how fast the spin dash is after releasing the charge
  - In the air, the longer the player holds the spin charge button, the faster the resulting spin dash will be once Sonic hits the ground
  - Flinging off a platform while spin dashing is now much smoother (I think)
*/
//
  #include "ReflectionHelpers" noemit

  #lib "Sonic"
  #lib "SonicParameters"
  #lib "MathHelpers"

  static float chargeCount = 0.0f;
//
{
  var dashVelocity = Sonic.Kinematics.GetHorizontalMagnitude();

  if (Sonic.IsGrounded() && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpinBoostCharge) {
    if (Sonic.Input.IsPressed(Sonic.PlayerActionType.PlayerSonicboom))
      chargeCount += 1.0f;
    
    dashVelocity = MathHelpers.Clamp(13.0f * chargeCount, 13.0f, 65.0f);
  } else if (!Sonic.IsGrounded()) {
    // potentially add forward momentum code here in the future

    if (Sonic.Input.IsDown(Sonic.PlayerActionType.PlayerSonicboom) && Sonic.State.GetCurrentStateID() == Sonic.StateID.StateSpinBoostCharge) {
      chargeCount += 1.0f;
      dashVelocity = MathHelpers.Clamp(chargeCount, 13.0f, 65.0f);
    }
  } else if (Sonic.State.GetPreviousStateID() != Sonic.StateID.StateSpinBoostCharge && Sonic.State.GetCurrentStateID() != Sonic.StateID.StateSpinBoost) {
    dashVelocity = Sonic.Kinematics.GetHorizontalMagnitude();
    chargeCount = 0.0f;
  }

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.initialRunTime, 0.2f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.speedBoost.initialSpeed, dashVelocity);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.speedBoost.maxSpeed, 3f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.speedBoost.minTurnSpeed, 30f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.speedBoost.decele.force, 10f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.speedBoost.decele.force2, 10f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.deceleNeutralMin.force, 750f);
  RFL_SET_PARAM(SonicParams, forwardView.spinBoost.deceleNeutralMax.force, 1000f);
}